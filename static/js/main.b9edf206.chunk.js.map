{"version":3,"sources":["actions/index.js","constant/ActionTypes.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/updateTask.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["updateTask","task","type","TaskForm","props","onCloseForm","onChange","event","target","name","value","setState","onSaveTask","preventDefault","state","onClear","status","id","this","nextPprops","isDisplayForm","className","onClick","onSubmit","Component","connect","dispatch","actions","Search","onSearch","keyword","Sort","sortBy","sortValue","onSort","by","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","to","sort","Control","TaskItem","onUpdateStatus","onDeleteTask","onUpdateTask","onOpenForm","index","TaskList","checked","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","toLowerCase","indexOf","a","b","elmTasks","map","key","search","App","onToggleForm","onClearTask","onShowForm","Boolean","window","location","hostname","match","generateString","Math","floor","random","toString","substring","generateID","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","setItem","stringify","cloneTask","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9edf206.chunk.js","sourcesContent":["import * as types from './../constant/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n\treturn {\r\n\t\ttype: types.LIST_ALL\r\n\t};\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n\treturn {\r\n\t\ttype: types.SAVE_TASK,\r\n\t\ttask\r\n\t};\r\n}\r\n\r\nexport const toggleForm = () => {\r\n\treturn {\r\n\t\ttype: types.TOGGLE_FORM\r\n\t};\r\n}\r\n\r\nexport const openForm = () => {\r\n\treturn {\r\n\t\ttype: types.OPEN_FORM\r\n\t};\r\n}\r\n\r\nexport const closeForm = () => {\r\n\treturn {\r\n\t\ttype: types.CLOSE_FORM\r\n\t};\r\n}\r\n\r\nexport const updateStatusTask = (id) => {\r\n\treturn {\r\n\t\ttype: types.UPDATE_STATUS_TASK,\r\n\t\tid\r\n\t};\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n\treturn {\r\n\t\ttype : types.DELETE_TASK,\r\n\t\tid\r\n\t};\r\n}\r\n\r\nexport const updateTask = (task) => {\r\n\treturn {\r\n\t\ttype: types.UPDATE_TASK,\r\n\t\ttask\r\n\t};\r\n}\r\n\r\nexport const filterTask = (filter) => {\r\n\treturn {\r\n\t\ttype: types.FILTER_TABLE,\r\n\t\tfilter   // { filterName, flterStatus }\r\n\t};\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n\treturn {\r\n\t\ttype: types.SEARCH,\r\n\t\tkeyword  \r\n\t};\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n\treturn {\r\n\t\ttype: types.SORT,\r\n\t\tsort  \r\n\t};\r\n}","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskForm extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      id: '',\r\n      name : '',\r\n      status: false\r\n    }\r\n  }\r\n\r\n  // Update\r\n  UNSAFE_componentWillMount() {\r\n    if (this.props.task) {\r\n      this.setState({\r\n        id: this.props.task.id,\r\n        name: this.props.task.name,\r\n        status: this.props.task.status\r\n      })\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextPprops) {\r\n    if (nextPprops && nextPprops.updateTask) {\r\n      this.setState({\r\n        id: nextPprops.updateTask.id,\r\n        name: nextPprops.updateTask.name,\r\n        status: nextPprops.updateTask.status\r\n      })\r\n    } else if (!nextPprops.updateTask) {\r\n      // console.log('update -> add')\r\n      this.onClear()\r\n    }\r\n  }\r\n\r\n  // Close Form\r\n  onCloseForm = () => {\r\n    this.props.onCloseForm()\r\n  }\r\n\r\n  onChange = (event) => {\r\n    let target = event.target;\r\n    let name = target.name;\r\n    let value = target.value;\r\n    if(name === 'status'){\r\n        value = target.value === 'true' ? true : false;\r\n    }\r\n    this.setState({\r\n        [name] : value\r\n    });\r\n  }\r\n\r\n  // Submit Form\r\n  onSaveTask = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSaveTask(this.state);\r\n    this.onCloseForm();\r\n  }\r\n\r\n  // Clear Form\r\n  onClear = () => {\r\n    this.setState({\r\n      name: '',\r\n      status: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { id } = this.state;\r\n    if (!this.props.isDisplayForm) return null\r\n    return (\r\n      <div className=\"card\">\r\n        <h3  className=\"card-header text-center\">\r\n          { id !== '' ? 'Update ToDo' : 'Add ToDo'}   \r\n          <i \r\n            className=\"fas fa-times-circle ml-5\"\r\n            onClick={ this.onCloseForm }\r\n          ></i>\r\n        </h3>\r\n        <div className=\"card-body\">\r\n          <form onSubmit={ this.onSaveTask }>\r\n            <div className=\"form-group\">\r\n              <label>Name: </label>\r\n              <input \r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                name=\"name\" \r\n                value={ this.state.name }\r\n                onChange={ this.onChange }\r\n              />\r\n            </div>\r\n            <label>Status: </label>\r\n            <select \r\n              className=\"form-control\"\r\n              name=\"status\"\r\n              value={ this.state.status }\r\n              onChange={ this.onChange }\r\n            >\r\n              <option value={ true }>Done</option>\r\n              <option value={ false }>Not Done</option>\r\n            </select>\r\n            <div className=\"mt-4 \">\r\n              <button type=\"submit\" className=\"btn btn-success\">\r\n                <i className=\"fas fa-plus mr-2\"></i>Save\r\n              </button>&nbsp;&nbsp;&nbsp;&nbsp;\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-danger\"\r\n                onClick={ this.onClear }\r\n              >\r\n                <i className=\"fas fa-times mr-2\"></i>Exit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isDisplayForm : state.isDisplayForm,\r\n    updateTask : state.updateTask\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSaveTask : (task) => {\r\n      dispatch(actions.saveTask(task))\r\n    },\r\n    onCloseForm : () => {\r\n      dispatch(actions.closeForm())\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: ''\r\n    };\r\n  }\r\n\r\n  onChange = (event) => {\r\n    let target = event.target;\r\n    let name = target.name;\r\n    let value = target.value;\r\n    this.setState({\r\n        [name] : value\r\n    });\r\n  }\r\n\r\n  onSearch = () => {\r\n    this.props.onSearch(this.state.keyword);\r\n  }\r\n\r\n  render() {\r\n    let { keyword } = this.state;\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"input-group\">\r\n          <input \r\n            className=\"form-control\" \r\n            type=\"text\"\r\n            name=\"keyword\"\r\n            value={ keyword }\r\n            onChange={ this.onChange }\r\n          />\r\n          <div className=\"input-group-btn\">\r\n            <span className=\"input-group-btn\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-primary\"\r\n                onClick={ this.onSearch }\r\n              >\r\n                <span className=\"fa fa-search mr-2\"></span>Search\r\n              </button>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSearch : (keyword) => {\r\n      dispatch(actions.searchTask(keyword))\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nclass Sort extends Component {\r\n\r\n  onClick = (sortBy, sortValue) => {\r\n    this.props.onSort({\r\n      by: sortBy,\r\n      value: sortValue\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"dropdown\">\r\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n              Sort\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n              <div onClick={ () => { this.onClick('name', 1)} }>\r\n                <Link to=\"\" className={ (this.props.sort.by === 'name' && this.props.sort.value === 1) ? 'dropdown-item font-weight-bold' : 'dropdown-item' }>\r\n                  A -> Z\r\n                </Link>\r\n              </div>\r\n              <div onClick={ () => { this.onClick('name', -1)} }>\r\n                <Link to=\"\" className={ (this.props.sort.by === 'name' && this.props.sort.value === -1) ? 'dropdown-item font-weight-bold' : 'dropdown-item'} >\r\n                  Z -> A\r\n                </Link>\r\n              </div>\r\n              <div onClick={ () => { this.onClick('status', 1)} }>\r\n                <Link to=\"\" className={ (this.props.sort.by === 'status' && this.props.sort.value === 1) ? 'dropdown-item font-weight-bold' : 'dropdown-item'} >\r\n                  Status: Done\r\n                </Link>\r\n              </div>\r\n              <div onClick={ () => { this.onClick('status', -1)} }>\r\n                <Link to=\"\" className={ (this.props.sort.by === 'status' && this.props.sort.value === -1) ? 'dropdown-item font-weight-bold' : 'dropdown-item'} >\r\n                  Status: Not Done\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\n// có nghĩa là các state của store sẽ chuyển thành các props của component này\r\nconst mapStateToProps = (state) => {\r\n  return { \r\n    sort : state.sort\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSort : (sort) => {\r\n      dispatch(actions.sortTask(sort))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\nclass Control extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row mt-2\">\r\n        <Search />       \r\n        <Sort />\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskItem extends Component {\r\n\r\n  // Update Status\r\n  onUpdateStatus = () => {\r\n    this.props.onUpdateStatus(this.props.task.id);\r\n  }\r\n\r\n  // Delete\r\n  onDeleteTask = () => {\r\n    this.props.onDeleteTask(this.props.task.id);\r\n    this.props.onCloseForm();\r\n  }\r\n\r\n  // Update\r\n  onUpdateTask = () => {\r\n    this.props.onOpenForm();\r\n    this.props.onUpdateTask(this.props.task);\r\n  }\r\n\r\n  render() {\r\n    let { task, index } = this.props;\r\n    return ( \r\n      <tr>\r\n        <td>{ index }</td>\r\n        <td>{ task.name }</td>\r\n        <td className=\"text-center\">\r\n          <button \r\n            type=\"button\" \r\n            className={ task.status === true ? 'btn btn-success' : 'btn btn-secondary'}\r\n            onClick={ this.onUpdateStatus }\r\n          >\r\n            { task.status === true ? 'Done' : 'Not Done'}\r\n          </button>\r\n        </td>       \r\n        <td className=\"text-center\">\r\n          <button \r\n            type=\"button\" \r\n            className=\"btn btn-warning\"\r\n            onClick={ this.onUpdateTask }\r\n          >\r\n            <i className=\"fas fa-pencil-alt mr-1\"></i>Edit\r\n          </button>&nbsp;&nbsp;\r\n          <button \r\n            type=\"button\" \r\n            className=\"btn btn-danger\"\r\n            onClick={ this.onDeleteTask }\r\n          >\r\n            <i className=\"fas fa-trash-alt mr-1\"></i>Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onUpdateStatus : (id) => {\r\n      dispatch(actions.updateStatusTask(id))\r\n    },\r\n    onDeleteTask : (id) => {\r\n      dispatch(actions.deleteTask(id))\r\n    },\r\n    onCloseForm : () => {\r\n      dispatch(actions.closeForm())\r\n    },\r\n    onOpenForm : () => {\r\n      dispatch(actions.openForm())\r\n    },\r\n    onUpdateTask : (task) => {\r\n      dispatch(actions.updateTask(task))\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterName: '',\r\n      filterStatus: -1\r\n    }\r\n  }\r\n\r\n  // Filter\r\n  onChange = (event) => {\r\n    let target = event.target;\r\n    let name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    let filter = {\r\n      name : name === 'filterName' ? value : this.state.filterName,\r\n      status : name === 'filterStatus' ? value : this.state.filterStatus\r\n    }\r\n    this.props.onFilterTable(filter);\r\n    this.setState({\r\n      [name] : value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { tasks, filterTable, keyword, sort } = this.props  ;\r\n    //------------Filter Table------------\r\n    if (filterTable) {\r\n        if (filterTable.name) {\r\n            tasks = tasks.filter( (task) => {\r\n                return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\r\n            })\r\n        }\r\n        tasks = tasks.filter( (task) => {\r\n            if (filterTable.status === -1) {\r\n                return task\r\n            } else {\r\n                return task.status === (filterTable.status === 1 ? true : false)\r\n            }\r\n        })\r\n    }\r\n\r\n    //----------SEARCH------------\r\n    tasks = tasks.filter((task) => {\r\n      return task.name.toLowerCase().indexOf(keyword) !== -1\r\n    })\r\n\r\n    //-----------SORT--------------\r\n    if (sort.by === 'name') {\r\n      tasks.sort( (a,b) => {\r\n          if (a.name > b.name) return sort.value\r\n          else if (a.name < b.name) return -sort.value\r\n          else return 0\r\n      })\r\n    } else {\r\n      tasks.sort( (a,b) => {\r\n          if (a.status > b.status) return -sort.value\r\n          else if (a.status < b.status) return sort.value\r\n          else return 0\r\n      })\r\n    }\r\n    let { filterName, filterStatus } = this.state\r\n    let elmTasks = tasks.map( (task,index) => {\r\n      return <TaskItem \r\n                key={ task.id } \r\n                index={ index + 1 } \r\n                task={ task }   \r\n              />\r\n    })\r\n\r\n    return (\r\n      <table className=\"table table-bordered table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">STT</th>\r\n            <th className=\"text-center\">Tên</th>\r\n            <th className=\"text-center\">Trạng Thái</th>\r\n            <th className=\"text-center\">Hành Động</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td></td>\r\n            <td>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"filterName\"\r\n                value={ filterName }\r\n                onChange= { this.onChange }\r\n              />\r\n            </td>\r\n            <td>\r\n              <select\r\n                className=\"form-control\"\r\n                name=\"filterStatus\"\r\n                value={ filterStatus }\r\n                onChange= { this.onChange }\r\n              >\r\n                <option value={ -1 }> All</option>\r\n                <option value={ 1 }>Done</option>\r\n                <option value={ 0 }> Not Done</option>\r\n              </select>\r\n            </td>\r\n            <td></td>\r\n          </tr>\r\n            { elmTasks }\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\n// có nghĩa là các state của store sẽ chuyển thành các props của component này\r\nconst mapStateToProps = (state) => {\r\n  return { \r\n    tasks: state.tasks,\r\n    filterTable : state.filterTable,\r\n    keyword : state.search,\r\n    sort : state.sort\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onFilterTable : (filter) => {\r\n        dispatch(actions.filterTask(filter))\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TaskForm from './components/TaskForm';\r\nimport Control from './components/Control';\r\nimport TaskList from './components/TaskList';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions/index';\r\n\r\nclass App extends Component {\r\n  // Toggle Form: add task\r\n  onToggleForm = () => {\r\n    let { updateTask } = this.props;\r\n    if (updateTask && updateTask !== '') {\r\n      this.props.onOpenForm();\r\n    } else {\r\n      this.props.onToggleForm();\r\n    }  \r\n    this.props.onClearTask({\r\n      id: '',\r\n      name: '',\r\n      status: false\r\n    });\r\n  }\r\n\r\n  // Show Form\r\n  onShowForm = () => {\r\n    this.setState({\r\n      isDisplayForm : true\r\n    });\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n    let { isDisplayForm } = this.props;\r\n    return (\r\n      <div className=\"container mt-3\">\r\n        <div>\r\n          <h1 className=\"text-center\">To Do App</h1>\r\n        </div>\r\n        <div className=\"row mt-5\">\r\n          <div className={ isDisplayForm ? 'col-md-4' : ''} >\r\n            {/* TaskForm */}\r\n            <TaskForm />\r\n          </div>\r\n          <div className={ isDisplayForm ? 'col-md-8' : 'col-md-12'}>\r\n            <button \r\n              type=\"button\" \r\n              className=\"btn btn-success\"\r\n              onClick={ this.onToggleForm }    \r\n            >\r\n              <span className=\"fa fa-plus mr-2\"></span> Add ToDo\r\n            </button>           \r\n            {/* Control */}\r\n            <Control />\r\n            <br /> \r\n            <div className=\"col-md-12 p-0\">  \r\n              {/* TaskList */}\r\n              <TaskList />         \r\n            </div>       \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isDisplayForm : state.isDisplayForm,\r\n    updateTask : state.updateTask\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onToggleForm : () => {\r\n      dispatch(actions.toggleForm());\r\n    },\r\n    onClearTask : (task) => {\r\n      dispatch(actions.updateTask(task));\r\n    },\r\n    onOpenForm : () => {\r\n      dispatch(actions.openForm());\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from './../constant/ActionTypes';\r\n\r\n// Generate Data\r\nconst generateString = () => {\r\n  return Math.floor( (1+Math.random() ) * 0x10000).toString(16).substring(1);\r\n}\t\r\nconst generateID = () => {\r\n  return generateString() + '-' + generateString() + '-' + generateString() + generateString() \r\n  + '-' + generateString() + generateString() + '-' + generateString();\r\n}\r\n\r\n// Find index\r\nconst findIndex = (tasks, id) => {\r\n  let result = -1;\r\n  tasks.forEach((task, index) => {\r\n    if(task.id === id){\r\n      result = index\r\n    }\r\n  });\r\n  return result;\r\n} \r\n\r\nconst data = JSON.parse(localStorage.getItem('tasks'));\r\nconst initialState = data ? data : [];\r\nconst myReducer = (state = initialState, action) => {\r\n  let id = '';\r\n  let index = -1;\r\n  switch (action.type) {\r\n    case types.LIST_ALL:\r\n      return state;\r\n    // SAVE TASK\r\n    case types.SAVE_TASK:\r\n      const task = {\r\n        id: action.task.id,\r\n        name: action.task.name,\r\n        status: (action.task.status === 'true' || action.task.status === true) ? true : false\r\n      };\r\n      if (!task.id) {\r\n        // add task\r\n        task.id = generateID();\r\n        state.push(task);\r\n      } else {\r\n        // update task\r\n        index = findIndex(state, task.id);\r\n        state[index] = task;\r\n      }\r\n      localStorage.setItem('tasks', JSON.stringify(state))\r\n      return [...state];\r\n\r\n    // UPDATE STATUS\r\n    case types.UPDATE_STATUS_TASK:\r\n      id = action.id;\r\n      index = findIndex(state, id);\r\n      // clone task mới = task cũ && status = !status\r\n      //xóa task cũ => push task mới\r\n      let cloneTask = {...state[index]};\r\n      cloneTask.status = !cloneTask.status;\r\n      state[index] = cloneTask;\r\n      localStorage.setItem('tasks',JSON.stringify(state));\r\n      return [...state];\r\n\r\n    // DELETE\r\n    case types.DELETE_TASK:\r\n      id = action.id;\r\n      index = findIndex(state, id);\r\n      state.splice(index, 1);\r\n      localStorage.setItem('tasks',JSON.stringify(state));\r\n      return [...state];\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constant/ActionTypes';\r\n\r\nconst initialState = false;\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.TOGGLE_FORM:\r\n      return !state;   \r\n    case types.OPEN_FORM:\r\n      return true;    \r\n    case types.CLOSE_FORM:\r\n      return false;\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constant/ActionTypes';\r\n\r\nconst initialState = {\r\n  id: '',\r\n  name: '',\r\n  status: false\r\n};\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.UPDATE_TASK:\r\n      return action.task;\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;","import * as types from './../constant/ActionTypes';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  status: -1\r\n};\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.FILTER_TABLE:\r\n      return {\r\n        name : action.filter.name,\r\n\t\t\t\tstatus : parseInt(action.filter.status, 10)\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constant/ActionTypes';\r\n\r\nconst initialState = '';\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SEARCH:\r\n      return action.keyword;\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constant/ActionTypes';\r\n\r\nconst initialState = {\r\n  by: 'name',\r\n  value: 1\r\n};\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SORT:\r\n      return {\r\n        by : action.sort.by,\r\n        value : action.sort.value\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default myReducer;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport updateTask from './updateTask';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\nconst myReducer = combineReducers({\r\n  tasks,\r\n  isDisplayForm,\r\n  updateTask,\r\n  filterTable,\r\n  search,\r\n  sort\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n// import configureStore from './store';\r\nimport './global-styles.scss';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport myReducer from './reducers/index';\r\n\r\nconst store = createStore(\r\n  myReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <App />         \r\n  </Provider>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <Provider store={configureStore()}>\r\n//    <App />\r\n//   </Provider>,\r\n//   document.getElementById('root')\r\n//  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}